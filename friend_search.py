import sys
import os
from PyQt5 import QtWidgets, QtCore, QtGui
import pg8000
import bcrypt
from avatar_editor import AvatarEditorDialog


class ProfileDialog(QtWidgets.QDialog):
    profile_updated = QtCore.pyqtSignal(dict)  # –°–∏–≥–Ω–∞–ª –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è

    def __init__(self, connection, username, client=None, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.username = username
        self.client = client
        self.avatar_path = None
        self.avatar_changed = False

        self.setWindowTitle("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–º")
        self.resize(400, 500)
        self.setStyleSheet("background-color: #e0e0e0;")

        # –û—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç
        self.layout = QtWidgets.QVBoxLayout(self)
        self.layout.setContentsMargins(20, 20, 20, 20)
        self.layout.setSpacing(15)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = QtWidgets.QLabel("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–º")
        self.title_label.setFont(QtGui.QFont("Arial", 16, QtGui.QFont.Bold))
        self.title_label.setAlignment(QtCore.Qt.AlignCenter)
        self.layout.addWidget(self.title_label)

        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.tabs = QtWidgets.QTabWidget()
        self.tabs.setStyleSheet("""
            QTabWidget::pane {
                border: 1px solid #999;
                border-radius: 5px;
                background-color: #d9d9d9;
            }
            QTabBar::tab {
                background-color: #c0c0c0;
                border: 1px solid #999;
                border-bottom: none;
                border-top-left-radius: 4px;
                border-top-right-radius: 4px;
                padding: 6px 12px;
                margin-right: 2px;
            }
            QTabBar::tab:selected {
                background-color: #d9d9d9;
                border-bottom: none;
            }
        """)

        # –í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
        self.profile_tab = QtWidgets.QWidget()
        self.create_profile_tab()
        self.tabs.addTab(self.profile_tab, "–ü—Ä–æ—Ñ–∏–ª—å")

        # –í–∫–ª–∞–¥–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.security_tab = QtWidgets.QWidget()
        self.create_security_tab()
        self.tabs.addTab(self.security_tab, "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")

        self.layout.addWidget(self.tabs)

        # –ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É
        self.buttons_layout = QtWidgets.QHBoxLayout()
        self.buttons_layout.setSpacing(10)

        self.cancel_btn = QtWidgets.QPushButton("–û—Ç–º–µ–Ω–∞")
        self.cancel_btn.setStyleSheet("""
            background-color: #d0d0d0;
            border: 1px solid #999;
            border-radius: 5px;
            padding: 8px 16px;
        """)
        self.cancel_btn.clicked.connect(self.reject)

        self.save_btn = QtWidgets.QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.save_btn.setStyleSheet("""
            background-color: #9370DB;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 8px 16px;
        """)
        self.save_btn.clicked.connect(self.save_changes)

        self.buttons_layout.addWidget(self.cancel_btn)
        self.buttons_layout.addWidget(self.save_btn)

        self.layout.addLayout(self.buttons_layout)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        self.load_profile_data()

    def create_profile_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        layout = QtWidgets.QVBoxLayout(self.profile_tab)
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(15)

        # –ê–≤–∞—Ç–∞—Ä
        avatar_layout = QtWidgets.QHBoxLayout()

        self.avatar_frame = QtWidgets.QLabel()
        self.avatar_frame.setFixedSize(100, 100)
        self.avatar_frame.setStyleSheet("""
            background-color: #d8c4eb;
            border-radius: 50px;
            border: 2px solid #9370DB;
        """)
        self.avatar_frame.setAlignment(QtCore.Qt.AlignCenter)
        self.avatar_frame.setText("üë§")
        self.avatar_frame.setFont(QtGui.QFont("Arial", 40))

        avatar_buttons_layout = QtWidgets.QVBoxLayout()
        avatar_buttons_layout.setSpacing(10)

        self.change_avatar_btn = QtWidgets.QPushButton("–ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä")
        self.change_avatar_btn.setStyleSheet("""
            background-color: #d0d0d0;
            border: 1px solid #999;
            border-radius: 5px;
            padding: 8px 16px;
        """)
        self.change_avatar_btn.clicked.connect(self.change_avatar)

        self.remove_avatar_btn = QtWidgets.QPushButton("–£–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä")
        self.remove_avatar_btn.setStyleSheet("""
            background-color: #d0d0d0;
            border: 1px solid #999;
            border-radius: 5px;
            padding: 8px 16px;
        """)
        self.remove_avatar_btn.clicked.connect(self.remove_avatar)

        avatar_buttons_layout.addWidget(self.change_avatar_btn)
        avatar_buttons_layout.addWidget(self.remove_avatar_btn)
        avatar_buttons_layout.addStretch()

        avatar_layout.addWidget(self.avatar_frame)
        avatar_layout.addSpacing(15)
        avatar_layout.addLayout(avatar_buttons_layout)
        avatar_layout.addStretch()

        layout.addLayout(avatar_layout)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        form_layout = QtWidgets.QFormLayout()
        form_layout.setSpacing(10)
        form_layout.setLabelAlignment(QtCore.Qt.AlignRight)

        self.username_label = QtWidgets.QLabel(self.username)
        self.username_label.setFont(QtGui.QFont("Arial", 12))
        form_layout.addRow("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", self.username_label)

        self.email_input = QtWidgets.QLineEdit()
        self.email_input.setStyleSheet("""
            background-color: white;
            border: 1px solid #999;
            border-radius: 5px;
            padding: 8px;
        """)
        form_layout.addRow("Email:", self.email_input)

        layout.addLayout(form_layout)
        layout.addStretch()

    def create_security_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        layout = QtWidgets.QVBoxLayout(self.security_tab)
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(15)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        security_title = QtWidgets.QLabel("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è")
        security_title.setFont(QtGui.QFont("Arial", 14, QtGui.QFont.Bold))
        layout.addWidget(security_title)

        # –§–æ—Ä–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
        form_layout = QtWidgets.QFormLayout()
        form_layout.setSpacing(10)
        form_layout.setLabelAlignment(QtCore.Qt.AlignRight)

        self.current_password = QtWidgets.QLineEdit()
        self.current_password.setEchoMode(QtWidgets.QLineEdit.Password)
        self.current_password.setStyleSheet("""
            background-color: white;
            border: 1px solid #999;
            border-radius: 5px;
            padding: 8px;
        """)
        form_layout.addRow("–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å:", self.current_password)

        self.new_password = QtWidgets.QLineEdit()
        self.new_password.setEchoMode(QtWidgets.QLineEdit.Password)
        self.new_password.setStyleSheet("""
            background-color: white;
            border: 1px solid #999;
            border-radius: 5px;
            padding: 8px;
        """)
        form_layout.addRow("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:", self.new_password)

        self.confirm_password = QtWidgets.QLineEdit()
        self.confirm_password.setEchoMode(QtWidgets.QLineEdit.Password)
        self.confirm_password.setStyleSheet("""
            background-color: white;
            border: 1px solid #999;
            border-radius: 5px;
            padding: 8px;
        """)
        form_layout.addRow("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", self.confirm_password)

        layout.addLayout(form_layout)

        # –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
        self.change_password_btn = QtWidgets.QPushButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å")
        self.change_password_btn.setStyleSheet("""
            background-color: #9370DB;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 8px 16px;
            margin-top: 10px;
        """)
        self.change_password_btn.clicked.connect(self.change_password)

        password_btn_layout = QtWidgets.QHBoxLayout()
        password_btn_layout.addStretch()
        password_btn_layout.addWidget(self.change_password_btn)
        password_btn_layout.addStretch()

        layout.addLayout(password_btn_layout)
        layout.addStretch()

    def load_profile_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            cursor = self.connection.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ email –≤ —Ç–∞–±–ª–∏—Ü–µ users
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'users' AND column_name = 'email'
            """)
            has_email_column = cursor.fetchone() is not None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ user_profiles
            cursor.execute("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_name = 'user_profiles'
                )
            """)
            has_profile_table = cursor.fetchone()[0]

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if has_email_column:
                cursor.execute("SELECT email FROM users WHERE username = %s", (self.username,))
                result = cursor.fetchone()
                if result and result[0]:
                    self.email_input.setText(result[0])

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π, –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä
            if has_profile_table:
                cursor.execute(
                    "SELECT avatar_path FROM user_profiles WHERE username = %s",
                    (self.username,)
                )
                result = cursor.fetchone()
                if result and result[0]:
                    avatar_path = result[0]

                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä
                    if avatar_path and os.path.exists(avatar_path):
                        self.avatar_path = avatar_path
                        self.load_avatar(avatar_path)

            cursor.close()
        except Exception as e:
            print(f"[ERROR] Failed to load profile data: {e}")
            QtWidgets.QMessageBox.warning(
                self,
                "–û—à–∏–±–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}"
            )

    def load_avatar(self, path):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏"""
        try:
            pixmap = QtGui.QPixmap(path)
            if not pixmap.isNull():
                # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏ –æ–±—Ä–µ–∑–∞–µ–º –¥–æ –∫—Ä—É–≥–∞
                size = min(pixmap.width(), pixmap.height())
                pixmap = pixmap.scaled(
                    100, 100,
                    QtCore.Qt.KeepAspectRatio,
                    QtCore.Qt.SmoothTransformation
                )

                # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–ª—É—é –º–∞—Å–∫—É
                mask = QtGui.QPixmap(100, 100)
                mask.fill(QtCore.Qt.transparent)
                painter = QtGui.QPainter(mask)
                painter.setRenderHint(QtGui.QPainter.Antialiasing)
                painter.setBrush(QtCore.Qt.white)
                painter.drawEllipse(0, 0, 100, 100)
                painter.end()

                # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É
                rounded_pixmap = QtGui.QPixmap(pixmap.size())
                rounded_pixmap.fill(QtCore.Qt.transparent)
                painter = QtGui.QPainter(rounded_pixmap)
                painter.setRenderHint(QtGui.QPainter.Antialiasing)
                painter.setCompositionMode(QtGui.QPainter.CompositionMode_Source)
                painter.drawPixmap(0, 0, mask)
                painter.setCompositionMode(QtGui.QPainter.CompositionMode_SourceIn)
                painter.drawPixmap(0, 0, pixmap)
                painter.end()

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä
                self.avatar_frame.setPixmap(rounded_pixmap)
                self.avatar_frame.setText("")

                # –£–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç–Ω–æ–π —Ñ–æ–Ω, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä
                self.avatar_frame.setStyleSheet("""
                    background-color: transparent;
                    border-radius: 50px;
                    border: 2px solid #9370DB;
                """)
        except Exception as e:
            print(f"[ERROR] Failed to load avatar: {e}")

    def change_avatar(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞"""
        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª
        file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
            self,
            "–í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            "",
            "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (*.png *.jpg *.jpeg *.gif *.bmp)"
        )

        if file_path:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –∞–≤–∞—Ç–∞—Ä–∞
            editor = AvatarEditorDialog(file_path, self)
            if editor.exec_() == QtWidgets.QDialog.Accepted:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                processed_image = editor.get_processed_image()

                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                avatar_dir = os.path.join("avatars")
                os.makedirs(avatar_dir, exist_ok=True)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤–∞—Ç–∞—Ä
                avatar_path = os.path.join(avatar_dir, f"{self.username}_avatar.png")
                processed_image.save(avatar_path, "PNG")

                # –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                self.avatar_path = avatar_path
                self.load_avatar(avatar_path)
                self.avatar_changed = True

    def remove_avatar(self):
        """–£–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∞–≤–∞—Ç–∞—Ä"""
        if self.avatar_path and os.path.exists(self.avatar_path):
            reply = QtWidgets.QMessageBox.question(
                self,
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä?",
                QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
                QtWidgets.QMessageBox.No
            )

            if reply == QtWidgets.QMessageBox.Yes:
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∞
                try:
                    os.remove(self.avatar_path)
                except Exception as e:
                    print(f"[ERROR] Failed to delete avatar file: {e}")

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                self.avatar_frame.setPixmap(QtGui.QPixmap())
                self.avatar_frame.setText("üë§")
                self.avatar_frame.setFont(QtGui.QFont("Arial", 40))
                self.avatar_frame.setStyleSheet("""
                    background-color: #d8c4eb;
                    border-radius: 50px;
                    border: 2px solid #9370DB;
                """)
                self.avatar_path = None
                self.avatar_changed = True

    def change_password(self):
        """–ò–∑–º–µ–Ω—è–µ—Ç –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        current_password = self.current_password.text()
        new_password = self.new_password.text()
        confirm_password = self.confirm_password.text()

        if not current_password or not new_password or not confirm_password:
            QtWidgets.QMessageBox.warning(
                self,
                "–û—à–∏–±–∫–∞",
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è."
            )
            return

        if new_password != confirm_password:
            QtWidgets.QMessageBox.warning(
                self,
                "–û—à–∏–±–∫–∞",
                "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç."
            )
            return

        try:
            cursor = self.connection.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
            cursor.execute("SELECT password FROM users WHERE username = %s", (self.username,))
            result = cursor.fetchone()

            if result:
                stored_hashed_password = result[0]
                if bcrypt.checkpw(current_password.encode('utf-8'), stored_hashed_password.encode('utf-8')):
                    # –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
                    hashed_password = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    cursor.execute(
                        "UPDATE users SET password = %s WHERE username = %s",
                        (hashed_password, self.username)
                    )
                    self.connection.commit()

                    QtWidgets.QMessageBox.information(
                        self,
                        "–£—Å–ø–µ—Ö",
                        "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω."
                    )

                    # –û—á–∏—â–∞–µ–º –ø–æ–ª—è
                    self.current_password.clear()
                    self.new_password.clear()
                    self.confirm_password.clear()
                else:
                    QtWidgets.QMessageBox.warning(
                        self,
                        "–û—à–∏–±–∫–∞",
                        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å."
                    )
            else:
                QtWidgets.QMessageBox.warning(
                    self,
                    "–û—à–∏–±–∫–∞",
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
                )

            cursor.close()
        except Exception as e:
            print(f"[ERROR] Failed to change password: {e}")
            self.connection.rollback()
            QtWidgets.QMessageBox.warning(
                self,
                "–û—à–∏–±–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å: {str(e)}"
            )

    def save_changes(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        email = self.email_input.text()

        try:
            cursor = self.connection.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ email –≤ —Ç–∞–±–ª–∏—Ü–µ users
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'users' AND column_name = 'email'
            """)
            has_email_column = cursor.fetchone() is not None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ user_profiles
            cursor.execute("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_name = 'user_profiles'
                )
            """)
            has_profile_table = cursor.fetchone()[0]

            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª–µ–π, —Å–æ–∑–¥–∞–µ–º –µ–µ
            if not has_profile_table:
                print("[DATABASE] Creating user_profiles table")
                cursor.execute("""
                    CREATE TABLE user_profiles (
                        username VARCHAR(50) PRIMARY KEY REFERENCES users(username),
                        avatar_path VARCHAR(255)
                    )
                """)
                self.connection.commit()
                print("[DATABASE] Created user_profiles table")

            # –û–±–Ω–æ–≤–ª—è–µ–º email, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∞—è –∫–æ–ª–æ–Ω–∫–∞
            if has_email_column and email:
                cursor.execute(
                    "UPDATE users SET email = %s WHERE username = %s",
                    (email, self.username)
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute(
                """
                INSERT INTO user_profiles (username, avatar_path)
                VALUES (%s, %s)
                ON CONFLICT (username) 
                DO UPDATE SET avatar_path = %s
                """,
                (self.username, self.avatar_path, self.avatar_path)
            )

            self.connection.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
            profile_data = {
                "username": self.username,
                "avatar_path": self.avatar_path,
                "email": email
            }
            self.profile_updated.emit(profile_data)

            QtWidgets.QMessageBox.information(
                self,
                "–£—Å–ø–µ—Ö",
                "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω."
            )

            self.accept()

            cursor.close()
        except Exception as e:
            print(f"[ERROR] Failed to save profile changes: {e}")
            self.connection.rollback()
            QtWidgets.QMessageBox.warning(
                self,
                "–û—à–∏–±–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è: {str(e)}"
            )


class FriendSearchDialog(QtWidgets.QDialog):
    def __init__(self, connection, current_username):
        super().__init__()
        self.connection = connection
        self.current_username = current_username
        self.setWindowTitle("Search Friends")
        self.resize(400, 500)
        self.setStyleSheet("background-color: #e0e0e0;")

        # Main layout
        self.layout = QtWidgets.QVBoxLayout(self)
        self.layout.setContentsMargins(20, 20, 20, 20)
        self.layout.setSpacing(15)

        # Search bar
        self.search_layout = QtWidgets.QHBoxLayout()
        self.search_input = QtWidgets.QLineEdit()
        self.search_input.setPlaceholderText("Enter username to search")
        self.search_input.setStyleSheet(
            "background-color: #ffffff; border-radius: 15px; padding: 10px; font-size: 14px;"
        )
        self.search_input.setMinimumHeight(40)

        self.search_btn = QtWidgets.QPushButton("üîç")
        self.search_btn.setFixedSize(40, 40)
        self.search_btn.setStyleSheet(
            "background-color: #d9d9d9; border-radius: 15px; font-size: 16px;"
        )
        self.search_btn.clicked.connect(self.search_users)

        self.search_layout.addWidget(self.search_input)
        self.search_layout.addWidget(self.search_btn)
        self.layout.addLayout(self.search_layout)

        # Results area
        self.results_label = QtWidgets.QLabel("Search Results")
        self.results_label.setFont(QtGui.QFont("Arial", 12, QtGui.QFont.Bold))
        self.layout.addWidget(self.results_label)

        self.results_area = QtWidgets.QScrollArea()
        self.results_area.setWidgetResizable(True)
        self.results_area.setStyleSheet("background-color: #ffffff; border-radius: 15px;")

        self.results_widget = QtWidgets.QWidget()
        self.results_layout = QtWidgets.QVBoxLayout(self.results_widget)
        self.results_layout.setAlignment(QtCore.Qt.AlignTop)
        self.results_layout.setContentsMargins(10, 10, 10, 10)
        self.results_layout.setSpacing(10)

        self.results_area.setWidget(self.results_widget)
        self.layout.addWidget(self.results_area)

        # Connect enter key to search
        self.search_input.returnPressed.connect(self.search_users)

    def search_users(self):
        search_term = self.search_input.text().strip()
        if not search_term:
            return

        # Clear previous results
        while self.results_layout.count():
            item = self.results_layout.takeAt(0)
            widget = item.widget()
            if widget:
                widget.deleteLater()

        try:
            cursor = self.connection.cursor()
            # –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ—Ö–æ–∂–∏–º–∏ –Ω–∏–∫–Ω–µ–π–º–∞–º–∏
            cursor.execute(
                "SELECT username FROM users WHERE username LIKE %s AND username != %s",
                (f"%{search_term}%", self.current_username)
            )
            results = cursor.fetchall()

            if not results:
                no_results = QtWidgets.QLabel("No users found")
                no_results.setAlignment(QtCore.Qt.AlignCenter)
                no_results.setStyleSheet("color: #666; font-size: 14px;")
                self.results_layout.addWidget(no_results)
            else:
                for user in results:
                    username = user[0]
                    self.add_user_result(username)

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "Error", f"Search error: {str(e)}")
        finally:
            cursor.close()

    def add_user_result(self, username):
        # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å–ª–∏ —É–∂–µ –¥—Ä—É–∑—å—è –∏–ª–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
        is_friend = self.check_friendship(username)
        has_pending = self.check_pending_request(username)

        # –≤–∏–¥–∂–µ—Ç
        user_widget = QtWidgets.QWidget()
        user_widget.setStyleSheet("background-color: #f0f0f0; border-radius: 10px;")
        user_widget.setMinimumHeight(70)

        user_layout = QtWidgets.QHBoxLayout(user_widget)
        user_layout.setContentsMargins(10, 5, 10, 5)

        # –∞–≤–∞—Ç–∞—Ä
        avatar_frame = QtWidgets.QFrame()
        avatar_frame.setFixedSize(50, 50)
        avatar_frame.setStyleSheet("background-color: #d8c4eb; border-radius: 25px;")

        avatar_layout = QtWidgets.QVBoxLayout(avatar_frame)
        avatar_layout.setContentsMargins(0, 0, 0, 0)

        avatar = QtWidgets.QLabel("üë§")
        avatar.setAlignment(QtCore.Qt.AlignCenter)
        avatar.setFont(QtGui.QFont("Arial", 20))
        avatar_layout.addWidget(avatar)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_avatar = self.load_user_avatar(username, avatar)

        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä, —É–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç–Ω–æ–π —Ñ–æ–Ω
        if has_avatar:
            avatar_frame.setStyleSheet("background-color: transparent; border-radius: 25px;")

        user_layout.addWidget(avatar_frame)

        # –Ω–∏–∫–Ω–µ–π–º
        name_label = QtWidgets.QLabel(username)
        name_label.setFont(QtGui.QFont("Arial", 12))

        user_layout.addWidget(name_label)
        user_layout.addStretch()

        # –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥—Ä—É–≥–∞ –∏ —Å—Ç–∞—Ç—É—Å
        if is_friend:
            status_label = QtWidgets.QLabel("–£–∂–µ –≤ –¥—Ä—É–∑—å—è—Ö")
            status_label.setStyleSheet("color: #4CAF50; font-weight: bold;")
            user_layout.addWidget(status_label)
        elif has_pending == "sent":
            status_label = QtWidgets.QLabel("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            status_label.setStyleSheet("color: #FFC107; font-weight: bold;")
            user_layout.addWidget(status_label)
        elif has_pending == "received":
            status_label = QtWidgets.QLabel("–í—Ö–æ–¥—è—â–∞—è –∑–∞—è–≤–∫–∞")
            status_label.setStyleSheet("color: #2196F3; font-weight: bold;")

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å
            accept_btn = QtWidgets.QPushButton("–ü—Ä–∏–Ω—è—Ç—å")
            accept_btn.setStyleSheet(
                "background-color: #4CAF50; color: white; border-radius: 15px; padding: 5px 15px;"
            )
            accept_btn.clicked.connect(lambda: self.accept_friend_request(username))

            reject_btn = QtWidgets.QPushButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å")
            reject_btn.setStyleSheet(
                "background-color: #FF5252; color: white; border-radius: 15px; padding: 5px 15px;"
            )
            reject_btn.clicked.connect(lambda: self.reject_friend_request(username))

            user_layout.addWidget(status_label)
            user_layout.addWidget(accept_btn)
            user_layout.addWidget(reject_btn)
        else:
            add_btn = QtWidgets.QPushButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è")
            add_btn.setStyleSheet(
                "background-color: #9370DB; color: white; border-radius: 15px; padding: 5px 15px;"
            )
            add_btn.clicked.connect(lambda: self.send_friend_request(username))
            user_layout.addWidget(add_btn)

        self.results_layout.addWidget(user_widget)

    def load_user_avatar(self, username, avatar_label):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–≥–æ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π QLabel"""
        try:
            cursor = self.connection.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ user_profiles
            cursor.execute("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_name = 'user_profiles'
                )
            """)
            has_profile_table = cursor.fetchone()[0]

            if not has_profile_table:
                cursor.close()
                return False

            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∞–≤–∞—Ç–∞—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute(
                "SELECT avatar_path FROM user_profiles WHERE username = %s",
                (username,)
            )
            result = cursor.fetchone()
            cursor.close()

            if result and result[0] and os.path.exists(result[0]):
                avatar_path = result[0]

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä
                pixmap = QtGui.QPixmap(avatar_path)
                if not pixmap.isNull():
                    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏ –æ–±—Ä–µ–∑–∞–µ–º –¥–æ –∫—Ä—É–≥–∞
                    size = min(pixmap.width(), pixmap.height())
                    pixmap = pixmap.scaled(
                        50, 50,
                        QtCore.Qt.KeepAspectRatio,
                        QtCore.Qt.SmoothTransformation
                    )

                    # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–ª—É—é –º–∞—Å–∫—É
                    mask = QtGui.QPixmap(50, 50)
                    mask.fill(QtCore.Qt.transparent)
                    painter = QtGui.QPainter(mask)
                    painter.setRenderHint(QtGui.QPainter.Antialiasing)
                    painter.setBrush(QtCore.Qt.white)
                    painter.drawEllipse(0, 0, 50, 50)
                    painter.end()

                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É
                    rounded_pixmap = QtGui.QPixmap(pixmap.size())
                    rounded_pixmap.fill(QtCore.Qt.transparent)
                    painter = QtGui.QPainter(rounded_pixmap)
                    painter.setRenderHint(QtGui.QPainter.Antialiasing)
                    painter.setCompositionMode(QtGui.QPainter.CompositionMode_Source)
                    painter.drawPixmap(0, 0, mask)
                    painter.setCompositionMode(QtGui.QPainter.CompositionMode_SourceIn)
                    painter.drawPixmap(0, 0, pixmap)
                    painter.end()

                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä
                    avatar_label.setPixmap(rounded_pixmap)
                    avatar_label.setText("")
                    return True
            return False
        except Exception as e:
            print(f"[ERROR] Failed to load avatar for {username}: {e}")
            return False

    def check_friendship(self, username):
        try:
            cursor = self.connection.cursor()
            cursor.execute(
                "SELECT 1 FROM friends WHERE (user1 = %s AND user2 = %s) OR (user1 = %s AND user2 = %s)",
                (self.current_username, username, username, self.current_username)
            )
            return cursor.fetchone() is not None
        except Exception as e:
            print(f"Error checking friendship: {e}")
            return False
        finally:
            cursor.close()

    def check_pending_request(self, username):
        try:
            cursor = self.connection.cursor()
            # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–µ–∫–≤–µ—Å—Ç
            cursor.execute(
                "SELECT 1 FROM friend_requests WHERE sender = %s AND receiver = %s AND status = 'pending'",
                (self.current_username, username)
            )
            if cursor.fetchone():
                return "sent"

            # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–µ–∫–≤–µ—Å—Ç
            cursor.execute(
                "SELECT 1 FROM friend_requests WHERE sender = %s AND receiver = %s AND status = 'pending'",
                (username, self.current_username)
            )
            if cursor.fetchone():
                return "received"

            return None
        except Exception as e:
            print(f"Error checking pending requests: {e}")
            return None
        finally:
            cursor.close()

    def send_friend_request(self, username):
        try:
            cursor = self.connection.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –¥—Ä—É–∑—å—è–º–∏
            cursor.execute(
                """
                SELECT 1 FROM friends 
                WHERE (user1 = %s AND user2 = %s) OR (user1 = %s AND user2 = %s)
                """,
                (self.current_username, username, username, self.current_username)
            )

            if cursor.fetchone():
                QtWidgets.QMessageBox.information(
                    self,
                    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                    f"–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –¥—Ä—É–∑—å—è–º–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username}"
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è
            cursor.execute(
                """
                SELECT status FROM friend_requests 
                WHERE sender = %s AND receiver = %s
                """,
                (self.current_username, username)
            )

            existing_request = cursor.fetchone()

            if existing_request:
                status = existing_request[0]
                if status == 'pending':
                    QtWidgets.QMessageBox.information(
                        self,
                        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                        f"–ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
                    )
                elif status == 'accepted':
                    QtWidgets.QMessageBox.information(
                        self,
                        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π"
                    )
                elif status == 'rejected':
                    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                    reply = QtWidgets.QMessageBox.question(
                        self,
                        "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å",
                        f"–í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}?",
                        QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
                        QtWidgets.QMessageBox.No
                    )

                    if reply == QtWidgets.QMessageBox.Yes:
                        cursor.execute(
                            """
                            UPDATE friend_requests 
                            SET status = 'pending', timestamp = CURRENT_TIMESTAMP 
                            WHERE sender = %s AND receiver = %s
                            """,
                            (self.current_username, username)
                        )
                        self.connection.commit()
                        QtWidgets.QMessageBox.information(
                            self,
                            "–£—Å–ø–µ—Ö",
                            f"–ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}"
                        )
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
                        self.search_users()
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute(
                """
                SELECT status FROM friend_requests 
                WHERE sender = %s AND receiver = %s
                """,
                (username, self.current_username)
            )

            incoming_request = cursor.fetchone()

            if incoming_request:
                status = incoming_request[0]
                if status == 'pending':
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏–Ω—è—Ç—å –µ–≥–æ
                    reply = QtWidgets.QMessageBox.question(
                        self,
                        "–í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å",
                        f"–£ –≤–∞—Å –µ—Å—Ç—å –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}. –ü—Ä–∏–Ω—è—Ç—å –µ–≥–æ?",
                        QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
                        QtWidgets.QMessageBox.Yes
                    )

                    if reply == QtWidgets.QMessageBox.Yes:
                        # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–ø—Ä–æ—Å
                        cursor.execute(
                            """
                            UPDATE friend_requests 
                            SET status = 'accepted' 
                            WHERE sender = %s AND receiver = %s
                            """,
                            (username, self.current_username)
                        )

                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É friends
                        cursor.execute(
                            """
                            INSERT INTO friends (user1, user2) 
                            VALUES (%s, %s)
                            """,
                            (self.current_username, username)
                        )

                        self.connection.commit()
                        QtWidgets.QMessageBox.information(
                            self,
                            "–£—Å–ø–µ—Ö",
                            f"–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}"
                        )
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
                        self.search_users()
                    return

            # –ï—Å–ª–∏ –Ω–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            cursor.execute(
                """
                INSERT INTO friend_requests (sender, receiver, status) 
                VALUES (%s, %s, 'pending')
                """,
                (self.current_username, username)
            )

            self.connection.commit()
            QtWidgets.QMessageBox.information(
                self,
                "–£—Å–ø–µ—Ö",
                f"–ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}"
            )

            # –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.search_users()

        except pg8000.IntegrityError:
            self.connection.rollback()
            QtWidgets.QMessageBox.warning(
                self,
                "–û—à–∏–±–∫–∞",
                "–ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
            )
            # –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.search_users()
        except Exception as e:
            self.connection.rollback()
            QtWidgets.QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è: {str(e)}"
            )
        finally:
            cursor.close()